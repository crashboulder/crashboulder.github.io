import { GenericService } from '../generic/service';
import { ISpeedAlert } from './model';
import { CURRENT_ENVIRONMENT } from '../environment';
import { ApplicationAccess } from '../security/';

export class SpeedAlertService extends GenericService<ISpeedAlert> {
    getAPIHost() {
        return CURRENT_ENVIRONMENT['et-rules'];
    }

    getRootPath() {
        return `/speed-alerts/v1/${this.applicationContext.applicationId}`;
    }

    @ApplicationAccess
    create(model: ISpeedAlert, options:any = {}): Promise<ISpeedAlert> {
        let resourceURL = this.getAPIHost() + this.getRootPath();
        return this.http.post<ISpeedAlert>(resourceURL, model, options);
    }

    @ApplicationAccess
    get(id: string, options:any = {}): Promise<ISpeedAlert[]> {
       let resourceURL = `${this.getAPIHost()}${this.getRootPath()}/${id}`;
       return this.http.get<ISpeedAlert[]>(resourceURL, options) as Promise<ISpeedAlert[]>;
    }

    @ApplicationAccess
    list(criteria?: any, options:any = {}): Promise<ISpeedAlert[]> {
        let resourceURL = `${this.getAPIHost()}${this.getRootPath()}`;
        if ( criteria && criteria.clientId ) resourceURL += '?clientId=' + criteria.clientId;
        return this.http.get<ISpeedAlert[]>(resourceURL, options) as Promise<ISpeedAlert[]>;
    }

    @ApplicationAccess
    delete(id: string, options:any = {}): Promise<boolean> {
        let resourceURL = `${this.getAPIHost()}${this.getRootPath()}/${id}`;
        return this.http.delete<boolean>(resourceURL, options);
    }
}
