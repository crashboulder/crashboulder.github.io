import { ApplicationContext } from '../application-context';
import { HttpRequest } from '../http';

export interface IDataService<T> {
    create(model: T): Promise<T>;
    get(id: string): Promise<T> | Promise<T[]>;
    update(model: T): Promise<T> | Promise<T[]>;
    list(criteria?: any): Promise<T[]>;
    delete(id: string): Promise<boolean>;
}

export abstract class GenericService<T> implements IDataService<T> {
    abstract getAPIHost(): string;
    abstract getRootPath(): string;

    constructor(
        public readonly applicationContext: ApplicationContext,
        protected http = new HttpRequest) { }

    getApplicationAccessToken() {
      return this.applicationContext.secret;
    }

    create(model: T): Promise<T> {
      return Promise.reject(new Error('create is unimplemented on this service'));
    }

    get(id: string): Promise<T> | Promise<T[]>{
      return Promise.reject(new Error('get is unimplemented on this service'));
    }

    update(model:T): Promise<T> | Promise<T[]>{
      return Promise.reject(new Error('update is unimplemented on this service'));
    }

    list(criteria: any): Promise<T[]> {
      return Promise.reject(new Error('list is unimplemented on this service'));
    }

    delete(id: string): Promise<boolean> {
      return Promise.reject(new Error('delete is unimplemented on this service'));
    }
}
