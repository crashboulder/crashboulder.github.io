import {
  AxiosStatic,
  AxiosInstance,
  AxiosPromise,
  AxiosResponse,
  AxiosError,
  AxiosRequestConfig} from 'axios';

import * as _ from 'underscore';

declare const require:any;

const axios = require('axios');
const SDK = require('../../package.json');

function extractDataFromResponse<T>(response: AxiosResponse): T {
  // console.log('received axios response', response);
  return (response.data as T);
}

function handleRequestError(error: AxiosError): any {
  // console.log('an error happened', error);
  return error;
}

export interface IHttpGetSignature {
  <T>(url:string, config?: any): Promise<T> | Promise<T[]>;
}

export interface IHttpPostSignature {
  <T>(url:string, data?: any, config?: any): Promise<T>;
}

export interface IHttpPatchSignature {
  <T>(url:string, data?: any, config?: any): Promise<T> | Promise<T[]>;
}

export interface IHttpDeleteSignature {
  <T>(url:string, data?: any, config?: any): Promise<boolean> | Promise<any>;
}

export interface IHttpListSignature {
  <T>(url:string, data?: any, config?: any): Promise<T[]>;
}

export interface IHttpRequest {
  get: IHttpGetSignature;
  post: IHttpPostSignature;
  patch: IHttpPatchSignature;
  delete: IHttpDeleteSignature;
  list: IHttpListSignature;

}

export class HttpRequest implements IHttpRequest {
  public get: IHttpGetSignature = Http.get;
  public post: IHttpPostSignature = Http.post;
  public patch: IHttpPatchSignature = Http.patch;
  public delete: IHttpDeleteSignature = Http.delete;
  public list: IHttpListSignature = Http.list;
}

export class Http {

  static finalizeConfig(config?: AxiosRequestConfig) {
    Http.addUserAgentToConfigHeaders(config);
  }

  static addUserAgentToConfigHeaders(config?: AxiosRequestConfig):AxiosRequestConfig {
    const currentVersion = SDK['version'];
    const userAgentHeader = {
      'User-Agent' : 'MapQuest.io Node.js SDK (v' + currentVersion + ')'
    };
    if (config) {
      const newHeaders = _.clone(config.headers) || {};
      const newConfig = _.clone(config);
      newConfig.headers = newHeaders;
      _.extend(newHeaders, userAgentHeader);
      return newConfig;
    } else return { headers: userAgentHeader }
  }

  static get<T>(url:string, config?: AxiosRequestConfig): Promise<T> | Promise<T[]> {
    Http.finalizeConfig(config);
    return axios.get(url, config)
      .then(extractDataFromResponse, handleRequestError);
  }

  static post<T>(url:string, data?: any, config?: AxiosRequestConfig): Promise<T> {
    Http.finalizeConfig(config);
    return axios.post(url, data, config)
      .then(extractDataFromResponse, handleRequestError);
  }

  static patch<T>(url:string, data?: any, config?: AxiosRequestConfig): Promise<T> | Promise<T[]> {
    return axios.patch(url, data, config)
      .then(extractDataFromResponse, handleRequestError);
  }

  static delete<T>(url:string, config?: AxiosRequestConfig): Promise<T> | Promise<any> {
    Http.finalizeConfig(config);
    return axios.delete(url, config)
      .then(extractDataFromResponse, handleRequestError);
  }

  static list<T>(url: string, data?: any, config?: any): Promise<T[]> {
    Http.finalizeConfig(config);
    return axios.get(url, config)
      .then(extractDataFromResponse, handleRequestError);
  }
}
