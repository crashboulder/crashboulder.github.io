import * as _ from 'underscore';
import { GenericService } from '../generic/service';
import { HttpRequest } from '../http/';
import { IClient } from './model';
import { IObservation, ObservationPayload } from '../observations';
import { CURRENT_ENVIRONMENT } from '../environment';
import { ApplicationAccess } from '../security/';


export class ClientService extends GenericService<IClient> {
  getAPIHost() {
    return CURRENT_ENVIRONMENT['et-devices'];
  }

  getRootPath() {
    return `/clients/v1/${this.applicationContext.applicationId}`;
  }

  @ApplicationAccess
  create(model: IClient, options: any = {}): Promise<IClient> {
    let resourceURL = `${this.getAPIHost()}${this.getRootPath()}/${model.clientId}`;
    return this.http.post<IClient>(resourceURL, model, options);
  }

  @ApplicationAccess
  update(model: IClient, options: any = {}): Promise<IClient> {
    let resourceURL = `${this.getAPIHost()}${this.getRootPath()}/${model.clientId}`;
    return this.http.patch<IClient>(resourceURL, model, options);
  }

  @ApplicationAccess
  postObservations(payload:ObservationPayload, options: any = {}): Promise<any> {
    let resourceURL = `${this.getAPIHost()}${this.getRootPath()}/${payload.clientId}/observations`;
    return this.http.post<any>(resourceURL, payload.toBody(), options);
  }

  @ApplicationAccess
  reset(model: IClient, options: any = {}) {
    let resourceURL = `${this.getAPIHost()}${this.getRootPath()}/${model.clientId}/reset/secret`;
    return this.http.post<IClient>(resourceURL, null, options);
  }

  @ApplicationAccess
  list(criteria?: any, options: any = {}): Promise<IClient[]> {
    let resourceURL = `${this.getAPIHost()}${this.getRootPath()}`;
    return this.http.get<IClient[]>(resourceURL, options) as Promise<IClient[]>;
  }

  @ApplicationAccess
  get(id: string, options: any = {}): Promise<IClient> {
    let resourceURL = `${this.getAPIHost()}${this.getRootPath()}/${id}`;
    return this.http.get<IClient>(resourceURL, options) as Promise<IClient>;
  }

  @ApplicationAccess
  delete(id: string, options:any = {}): Promise<boolean> {
    let resourceURL = `${this.getAPIHost()}${this.getRootPath()}/${id}`;
    return this.http.delete<boolean>(resourceURL, options);
  }
}
