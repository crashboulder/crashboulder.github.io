
export interface IObservation {
  location?: ILocation;
  observedAt: number;
  compassBearing?: number;
  instantenousSpeed?: number;
  event?: IEvent;
  sequence?: string;
  sessionId?: string;
  receivedAt: number;
}

export interface ILocation {
  longitude: number;
  latitude: number;
  haccuracy: number;
  altitude?: number;
}


export class StartedRoute {
  public readonly type = 'startedroute';
  constructor(public routeSessionId: string) { }
}

export class AbandonedRoute {
  public readonly type = 'abandonedroute';
  constructor(public routeSessionId: string) { }
}

export class CompletedRoute {
  public readonly type = 'completedroute';
  constructor(public routeSessionId: string) { }
}

export type IEvent = StartedRoute | AbandonedRoute | CompletedRoute;

export class ObservationPayload {

  constructor(
    public clientId:string,
    public observations:IObservation[],
    public sessionId?:string) { }

  public toBody():any {
    let body:any = {
      observations: this.observations
    };
    if (this.sessionId) {
      body.sessionId = this.sessionId;
    }
    return body;
  }

}

