import * as chai from 'chai';
import * as chaiAsPromised from 'chai-as-promised';
import { IApplication } from '../../src/applications/';
import { IClient, ClientService } from '../../src/clients/';
import { IObservation, ObservationPayload } from '../../src/observations/';
import { ApplicationContext } from '../../src/application-context';
import { getConfiguration } from '../../src/';
import { MockHttpRequest } from './mocks';
import { CURRENT_ENVIRONMENT } from '../test-constants';

const expect = chai.expect;
chai.use(chaiAsPromised);
chai.should();

describe('Client Service Mock Http \n\n', function() {
  let clientService: ClientService;
  let applicationContext = new ApplicationContext('application', getConfiguration().secret);
  const MOCK_CLIENT:IClient = {
    appId: 'application',
    clientId: 'client',
    label: 'mock-client'
  };

  beforeEach(function() {
    clientService = new ClientService(applicationContext, new MockHttpRequest);
  });

  it('create should post to a properly formatted URL', function() {
    let postRequest = clientService.create(MOCK_CLIENT);
    return expect(postRequest).to.eventually.satisfy(function(responseObject: any) {
      let host = CURRENT_ENVIRONMENT['et-devices'];
      let properURL = `${host}/clients/v1/application/client`;
      return responseObject.url === properURL;
    });
  });

  it('create should post an observation to a properly formatted URL', function() {
    let observation:IObservation = {
      observedAt: Date.now(),
      receivedAt: Date.now()
    };
    let payload = new ObservationPayload(
      MOCK_CLIENT.clientId as string,
      [observation]
    );
    let postRequest = clientService.postObservations(payload);
    return expect(postRequest).to.eventually.satisfy(function(responseObject: any) {
      let host = CURRENT_ENVIRONMENT['et-devices'];
      let properURL = `${host}/clients/v1/application/client/observations`;
      return responseObject.url === properURL;
    });
  });

  it('list should get a properly formatted URL', function() {
    let postRequest = clientService.list();
    return expect(postRequest).to.eventually.be.fulfilled.and.satisfy(function(responseObject: any) {
      let host = CURRENT_ENVIRONMENT['et-devices'];
      let properURL = `${host}/clients/v1/application`;
      return responseObject.url === properURL;
    });
  });

  it('update should patch to a properly formatted URL', function() {
    let updateRequest = clientService.update(MOCK_CLIENT);
    return expect(updateRequest).to.eventually.satisfy(function(responseObject: any) {
      let host = CURRENT_ENVIRONMENT['et-devices'];
      let properURL = `${host}/clients/v1/application/client`;
      return responseObject.url === properURL;
    });
  });

  it('delete should delete to a properly formatted URL', function() {
    let deleteRequest = clientService.delete('42');
    return expect(deleteRequest).to.eventually.satisfy(function(responseObject: any) {
      let host = CURRENT_ENVIRONMENT['et-devices'];
      let properURL = `${host}/clients/v1/application/42`;
      return responseObject.url === properURL;
    });
  });

  it('create should call the platform API to create a new tenant ( client )', function() {
    return clientService.create(MOCK_CLIENT).should.eventually.be.fulfilled.and.satisfy((result:any) => result.data === MOCK_CLIENT);
  });

  it('list should get the list from the service without using a payload', function() {
    let getRequest = clientService.list();
    return expect(getRequest).to.eventually.be.fulfilled.and.satisfy((responseObject: any) => !responseObject.data);
  });

  it('should reset using a properly formatted URL', function() {
    let resetRequest = clientService.reset(MOCK_CLIENT);
    return expect(resetRequest).to.eventually.be.fulfilled.and.satisfy((responseObject: any) => {
      let host = CURRENT_ENVIRONMENT['et-devices'];
      let propahEarl = `${host}/clients/v1/${MOCK_CLIENT.appId}/${MOCK_CLIENT.clientId}/reset/secret`;
      return responseObject.url === propahEarl;
    });
  }); 

});
