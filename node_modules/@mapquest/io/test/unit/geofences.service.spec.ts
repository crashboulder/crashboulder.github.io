import * as _ from 'underscore';
import * as chai from 'chai';
import * as chaiAsPromised from 'chai-as-promised';
import { IApplication } from '../../src/applications/';
import { IGeofence, GeofenceService } from '../../src/geofences/';
import { IDataService } from '../../src/generic/';
import { MockHttpRequest } from './mocks';
import { ApplicationContext } from '../../src/application-context';
import { getConfiguration } from '../../src/';
import { CURRENT_ENVIRONMENT } from '../test-constants';

declare const require:any;

let sinon = require('sinon'); // workaround for: import * as sinon from 'sinon';
let sinonChai = require('sinon-chai'); //workaround for: import * as sinonChai from 'sinon-chai';

const expect = chai.expect;
chai.use(chaiAsPromised);
chai.use(sinonChai);
chai.should();

describe('Geofence Service: \n\n', function() {
  const FAKE_GEOFENCE:IGeofence = {
    appId:      'application',
    clientId:   'fake-client-id',
    geofenceId: 'geofence-id',
    region: {
      type:       'circle',
      longitude:  -104.999567,
      latitude:   39.750580,
      radius:     90
    },
    enter: {
      reactions: []
    }
  };

  let geofenceService: GeofenceService;
  let applicationContext = new ApplicationContext('application', getConfiguration().secret);

  beforeEach(function() {
    geofenceService = new GeofenceService(applicationContext, new MockHttpRequest);
  });

  describe('create', function() {

    it('should call the platform API to create a geofence rule', function() {
      return geofenceService.create(FAKE_GEOFENCE).should.eventually.satisfy((result:any) => result.data === FAKE_GEOFENCE);
    });

    it('should post to a properly formatted URL', function() {
      let postRequest = geofenceService.create(FAKE_GEOFENCE);
      return expect(postRequest).to.eventually.satisfy(function(responseObject: any) {
        let host = CURRENT_ENVIRONMENT['et-rules'];
        let properURL = `${host}/geofences/v1/application`;
        return responseObject.url === properURL;
      });
    });

  });

  describe('list', function() {

    it('should list geofences for a client id from the correct URL', function() {
      let host = CURRENT_ENVIRONMENT['et-rules'];
      let clientId = '42';
      let expectedURL = `${host}/geofences/v1/${applicationContext.applicationId}?clientId=${clientId}`;
      return geofenceService.list({clientId:clientId}).should.eventually.satisfy((requestObject:any) => {
        return requestObject.url === expectedURL && !requestObject.data;
      });
    });

  });

  describe('get', function() {

    let geofenceId = '999';

    it('should get a particular geofence by id', function() {
      let host = CURRENT_ENVIRONMENT['et-rules'];
      let expectedURL = `${host}/geofences/v1/${applicationContext.applicationId}/${geofenceId}`;
      return geofenceService.get(geofenceId).should.eventually.satisfy((requestObject:any) => {
        return requestObject.url === expectedURL && requestObject.data !== null;
      });
    });

  });

  describe('delete', function() {

    let geofenceId = '999';

    it('should delete a particular geofence by id', function() {
      let host = CURRENT_ENVIRONMENT['et-rules'];
      let expectedURL = `${host}/geofences/v1/${applicationContext.applicationId}/${geofenceId}`;
      return geofenceService.delete(geofenceId).should.eventually.satisfy((requestObject:any) => {
        return requestObject.url === expectedURL && requestObject.data !== null;
      });
    });

  });

});

