import { IHttpRequest } from '../../src/http';
import { AxiosError } from 'axios';

export class MockHttpRequest implements IHttpRequest {

  private simulateExpiredToken:boolean = false;
  private expiredTokenSimulated:boolean = false;

  constructor(public options:any = {}) {
    if (options.simulateExpiredToken) {
      this.simulateExpiredToken = true;
    }
  }

  get<T>(url: string, config?: any): Promise<T> {
    return Promise.resolve((<any>{url, config}) as T);
  }

  post<T>(url: string, data?: T, config?: any): Promise<T> {
    if (this.simulateExpiredToken && !this.expiredTokenSimulated) {
      let errorResponse = {
        config,
        response: { status: 401 }
      };
      this.expiredTokenSimulated = true;
      return Promise.resolve((<any>errorResponse) as T);
    } else {
      let responseObject = {url, data, config};
      return Promise.resolve((<any>responseObject) as T);
    }
  }

  patch<T>(url: string, data?: T, config?: any): Promise<T> | Promise<T[]> {
    let responseObject = {url, data, config};
    return Promise.resolve((<any>responseObject) as T);
  }

  delete<T>(url: string, config?: any): Promise<any> {
    return Promise.resolve({url, config});
  }

  list<T>(url: string, data?: any, config?: any): Promise<T[]> {
    return Promise.resolve([(<any>{url, data, config})] as T[]);
  }
}
