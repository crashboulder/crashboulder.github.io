import * as _ from 'underscore';
import { expect } from 'chai';
import { IApplication } from '../../src/applications/';
import { IGeofence, GeofenceService } from '../../src/geofences/';
import { ApplicationContext } from '../../src/application-context';
import { getConfiguration } from '../../src/';
import { CURRENT_ENVIRONMENT } from '../test-constants';

describe('Geofence Service Integration', function() {
  this.timeout(5000);
  const FAKE_APPLICATION:IApplication = {
    appId: `test`
  };
  const FAKE_GEOFENCE:IGeofence = {
    appId:        FAKE_APPLICATION.appId,
    clientId:     'fake-client-id',
    region: {
      type:       'circle',
      longitude:  -104.999567,
      latitude:   39.750580,
      radius:     90
    },
    enter: {
      reactions: []
    }
  };

  let geofenceService:GeofenceService;
  let applicationContext = new ApplicationContext('test', getConfiguration().secret);

  beforeEach(() => {
    geofenceService = new GeofenceService(applicationContext);
    return geofenceService;
  });

  it('should create a geofence', (done) => {
    let geofenceCreation = geofenceService.create(FAKE_GEOFENCE);
    geofenceCreation.then(function(result: IGeofence) {
      // console.log('geofence creation', result);
      expect(result.geofenceId).to.exist;
      return done();
    });
  });

  describe('with an existing geofence', () => {

    let testClientId = 'node-api-geofence-service-spec-test-client';
    let testGeofence:IGeofence;

    beforeEach((done) => {
      testGeofence = (<any>_).extend({}, FAKE_GEOFENCE, {clientId:testClientId});
      geofenceService.create(testGeofence)
        .then((response:any) => {
          testGeofence = response;
          return done();
        });
    });

    it('should be retrievable with get', (done: Function) => {
      let getCall = geofenceService.get(testGeofence.geofenceId as string);
      getCall.then(function(result: any) {
        // console.log('should be retrievable with get result: ', result);
        expect(result.geofence.geofenceId).to.equal(testGeofence.geofenceId);
        return done();
      });
    });

    it('should retrievable from a list', (done: Function) => {
      let listCall = geofenceService.list({clientId:testClientId});
      listCall.then(function(result: any) {

        // console.log('list call', result, result.geofences);
        let anyGeofenceIdMatches = _.any(result.geofences, (geofence: IGeofence) => geofence.geofenceId === testGeofence.geofenceId);
        expect(anyGeofenceIdMatches).to.be.true;
        return done();
      })
    });

    it('should be deleteable', (done) => {
      let idOfRuleToDelete = testGeofence.geofenceId as string;
      let geofenceDeletion = geofenceService.delete(idOfRuleToDelete);
      geofenceDeletion.then(function(result) {
        // console.log('deletion result', result);
        let deletedGeofenceRetrieval = geofenceService.get(idOfRuleToDelete);
        // console.log('retrieve deleted geofence', idOfRuleToDelete);
        return deletedGeofenceRetrieval.catch(function(fetchResult: any) {
          expect(fetchResult.response.status).to.equal(404);
          return done();
        });
      });
    });

  });

});
