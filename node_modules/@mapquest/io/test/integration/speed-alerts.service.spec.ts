import * as _ from 'underscore';
import { expect } from 'chai';
import { AxiosError, AxiosResponse } from 'axios';
import { IApplication } from '../../src/applications/';
import { ISpeedAlert, SpeedAlertService } from '../../src/speed-alerts/';
import { ApplicationContext } from '../../src/application-context';
import { getConfiguration } from '../../src/';
import { CURRENT_ENVIRONMENT } from '../test-constants';


describe('Speed Alert Integration', function() {
  this.timeout(5000);
  const FAKE_APPLICATION:IApplication = {
    appId: `test`,
    label: 'fake-application'
  };
  const FAKE_SPEED_ALERT:ISpeedAlert = {
    appId: FAKE_APPLICATION.appId,
    clientId: 'fake-client-id',
    maxSpeed: {
      reactions: [],
      speed: 50
    }
  };

  let applicationContext = new ApplicationContext('test', getConfiguration().secret);
  let speedAlertService:SpeedAlertService = new SpeedAlertService(applicationContext);

  it('should create a speed rule', (done) => {
    speedAlertService.create(FAKE_SPEED_ALERT)
      .then(function(speedAlert: ISpeedAlert) {
        // console.log('create speed alert', speedAlert);
        expect(speedAlert.speedAlertId).to.exist;
        return done();
      })
  });

  describe('with an existing speed alert', () => {

    let testClientId = 'node-api-speed-alert-service-spec-test-client';
    let testSpeedAlert:ISpeedAlert;

    beforeEach((done) => {
      testSpeedAlert = (<any>_).extend({}, FAKE_SPEED_ALERT, {clientId:testClientId});
      // TODO: The above syntax is in place because for some reason the below doesn't work:
      // testSpeedAlert = { ...FAKE_SPEED_ALERT, clientId:testClientId } as ISpeedAlert;
      speedAlertService.create(testSpeedAlert)
        .then((response:any) => {
          testSpeedAlert = response;
          done();
        });
    });

    it('should retrievable with get', (done) => {
      let getCall = speedAlertService.get(testSpeedAlert.speedAlertId as string);
      getCall.then(function(speedAlert: any) {
        // console.log(speedAlert);
        expect(speedAlert.speedAlertId).to.equal(testSpeedAlert.speedAlertId);
        return done();
      });
    });

    it('should retrievable from a list', (done) => {
      let listCall = speedAlertService.list({clientId: testClientId});
      listCall.then(function(listResult: any) {
        let anySpeedAlertMatchesId = _.any(listResult.speedAlerts, (speedAlert: ISpeedAlert) => speedAlert.speedAlertId === testSpeedAlert.speedAlertId);
        // console.log(listResult, anySpeedAlertMatchesId);
        expect(anySpeedAlertMatchesId).to.exist;
        return done();
      });
    });

    it('should be deleteable', (done) => {
      let idOfRuleToDelete = testSpeedAlert.speedAlertId as string;
      let speedAlertDeletion = speedAlertService.delete(idOfRuleToDelete);
      speedAlertDeletion.then(function() {
        let deletedSpeedAlertRetrieval = speedAlertService.get(idOfRuleToDelete);
        // console.log(deletedSpeedAlertRetrieval, idOfRuleToDelete);
        return deletedSpeedAlertRetrieval.catch(function(fetchResult: any) {
          expect(fetchResult.response.status).to.equal(404);
          return done();
        });
      });
    });

  });
});
