import { ApplicationAccess } from './security';
import { GenericService } from './generic/service';
import { IRule } from './rules';
import { IGeofence, GeofenceService } from './geofences';
import { IObservation } from './observations';
import { ISpeedAlert, SpeedAlertService } from './speed-alerts';
import { ITransition, GeofenceTransition, EnterTransition, ExitTransition, DwellTransition, SpeedTransition } from './transitions';
import { IApplication, ApplicationService } from './applications';
import { IClient, ClientService } from './clients';
export declare const ENVIRONMENT_CONFIGURATION: {
    API_HOSTS: {
        alpha: {
            'et-devices': string;
            'et-rules': string;
            'et-auth': string;
        };
    };
};
export declare const CURRENT_ENVIRONMENT: {
    'et-devices': string;
    'et-rules': string;
    'et-auth': string;
};
export declare class Webhook {
    url: string;
    readonly type: string;
    constructor(url: string);
}
export declare class SlackNotification {
    url: string;
    username: string;
    readonly type: string;
    constructor(url: string, username: string);
}
export declare type IReaction = Webhook | SlackNotification;
export interface IRegion {
    type: string;
    longitude: number;
    latitude: number;
    radius: number;
}
export declare class CircularRegion implements IRegion {
    longitude: number;
    latitude: number;
    radius: number;
    readonly type: string;
    constructor(longitude: number, latitude: number, radius: number);
}
export declare function setApplicationSecret(secret: string): void;
export declare function getApplicationSecret(): string;
export { ApplicationAccess, GenericService, IRule, IGeofence, GeofenceService, IObservation, ISpeedAlert, SpeedAlertService, ITransition, GeofenceTransition, EnterTransition, ExitTransition, DwellTransition, SpeedTransition, IApplication, ApplicationService, IClient, ClientService };
export * from './http/';
