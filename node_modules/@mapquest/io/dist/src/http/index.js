"use strict";
var _ = require('underscore');
var axios = require('axios');
var SDK = require('../../package.json');
function extractDataFromResponse(response) {
    // console.log('received axios response', response);
    return response.data;
}
function handleRequestError(error) {
    // console.log('an error happened', error);
    return error;
}
var HttpRequest = (function () {
    function HttpRequest() {
        this.get = Http.get;
        this.post = Http.post;
        this.patch = Http.patch;
        this.delete = Http.delete;
        this.list = Http.list;
    }
    return HttpRequest;
}());
exports.HttpRequest = HttpRequest;
var Http = (function () {
    function Http() {
    }
    Http.finalizeConfig = function (config) {
        Http.addUserAgentToConfigHeaders(config);
    };
    Http.addUserAgentToConfigHeaders = function (config) {
        var currentVersion = SDK['version'];
        var userAgentHeader = {
            'User-Agent': 'MapQuest.io Node.js SDK (v' + currentVersion + ')'
        };
        if (config) {
            var newHeaders = _.clone(config.headers) || {};
            var newConfig = _.clone(config);
            newConfig.headers = newHeaders;
            _.extend(newHeaders, userAgentHeader);
            return newConfig;
        }
        else
            return { headers: userAgentHeader };
    };
    Http.get = function (url, config) {
        Http.finalizeConfig(config);
        return axios.get(url, config)
            .then(extractDataFromResponse, handleRequestError);
    };
    Http.post = function (url, data, config) {
        Http.finalizeConfig(config);
        return axios.post(url, data, config)
            .then(extractDataFromResponse, handleRequestError);
    };
    Http.patch = function (url, data, config) {
        return axios.patch(url, data, config)
            .then(extractDataFromResponse, handleRequestError);
    };
    Http.delete = function (url, config) {
        Http.finalizeConfig(config);
        return axios.delete(url, config)
            .then(extractDataFromResponse, handleRequestError);
    };
    Http.list = function (url, data, config) {
        Http.finalizeConfig(config);
        return axios.get(url, config)
            .then(extractDataFromResponse, handleRequestError);
    };
    return Http;
}());
exports.Http = Http;
//# sourceMappingURL=index.js.map