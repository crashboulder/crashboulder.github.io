/// <reference types="es6-promise" />
import { AxiosRequestConfig } from 'axios';
export interface IHttpGetSignature {
    <T>(url: string, config?: any): Promise<T> | Promise<T[]>;
}
export interface IHttpPostSignature {
    <T>(url: string, data?: any, config?: any): Promise<T>;
}
export interface IHttpPatchSignature {
    <T>(url: string, data?: any, config?: any): Promise<T> | Promise<T[]>;
}
export interface IHttpDeleteSignature {
    <T>(url: string, data?: any, config?: any): Promise<boolean> | Promise<any>;
}
export interface IHttpListSignature {
    <T>(url: string, data?: any, config?: any): Promise<T[]>;
}
export interface IHttpRequest {
    get: IHttpGetSignature;
    post: IHttpPostSignature;
    patch: IHttpPatchSignature;
    delete: IHttpDeleteSignature;
    list: IHttpListSignature;
}
export declare class HttpRequest implements IHttpRequest {
    get: IHttpGetSignature;
    post: IHttpPostSignature;
    patch: IHttpPatchSignature;
    delete: IHttpDeleteSignature;
    list: IHttpListSignature;
}
export declare class Http {
    static finalizeConfig(config?: AxiosRequestConfig): void;
    static addUserAgentToConfigHeaders(config?: AxiosRequestConfig): AxiosRequestConfig;
    static get<T>(url: string, config?: AxiosRequestConfig): Promise<T> | Promise<T[]>;
    static post<T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T>;
    static patch<T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> | Promise<T[]>;
    static delete<T>(url: string, config?: AxiosRequestConfig): Promise<T> | Promise<any>;
    static list<T>(url: string, data?: any, config?: any): Promise<T[]>;
}
