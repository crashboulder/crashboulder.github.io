/// <reference types="es6-promise" />
import { ApplicationContext } from '../application-context';
import { HttpRequest } from '../http';
export interface IDataService<T> {
    create(model: T): Promise<T>;
    get(id: string): Promise<T> | Promise<T[]>;
    update(model: T): Promise<T> | Promise<T[]>;
    list(criteria?: any): Promise<T[]>;
    delete(id: string): Promise<boolean>;
}
export declare abstract class GenericService<T> implements IDataService<T> {
    readonly applicationContext: ApplicationContext;
    protected http: HttpRequest;
    abstract getAPIHost(): string;
    abstract getRootPath(): string;
    constructor(applicationContext: ApplicationContext, http?: HttpRequest);
    getApplicationAccessToken(): string;
    create(model: T): Promise<T>;
    get(id: string): Promise<T> | Promise<T[]>;
    update(model: T): Promise<T> | Promise<T[]>;
    list(criteria: any): Promise<T[]>;
    delete(id: string): Promise<boolean>;
}
