"use strict";
var _ = require('underscore');
var chai_1 = require('chai');
var _1 = require('../../src/speed-alerts/');
var application_context_1 = require('../../src/application-context');
var _2 = require('../../src/');
describe('Speed Alert Integration', function () {
    this.timeout(5000);
    var FAKE_APPLICATION = {
        appId: "test",
        label: 'fake-application'
    };
    var FAKE_SPEED_ALERT = {
        appId: FAKE_APPLICATION.appId,
        clientId: 'fake-client-id',
        maxSpeed: {
            reactions: [],
            speed: 50
        }
    };
    var applicationContext = new application_context_1.ApplicationContext('test', _2.getConfiguration().secret);
    var speedAlertService = new _1.SpeedAlertService(applicationContext);
    it('should create a speed rule', function (done) {
        speedAlertService.create(FAKE_SPEED_ALERT)
            .then(function (speedAlert) {
            // console.log('create speed alert', speedAlert);
            chai_1.expect(speedAlert.speedAlertId).to.exist;
            return done();
        });
    });
    describe('with an existing speed alert', function () {
        var testClientId = 'node-api-speed-alert-service-spec-test-client';
        var testSpeedAlert;
        beforeEach(function (done) {
            testSpeedAlert = _.extend({}, FAKE_SPEED_ALERT, { clientId: testClientId });
            // TODO: The above syntax is in place because for some reason the below doesn't work:
            // testSpeedAlert = { ...FAKE_SPEED_ALERT, clientId:testClientId } as ISpeedAlert;
            speedAlertService.create(testSpeedAlert)
                .then(function (response) {
                testSpeedAlert = response;
                done();
            });
        });
        it('should retrievable with get', function (done) {
            var getCall = speedAlertService.get(testSpeedAlert.speedAlertId);
            getCall.then(function (speedAlert) {
                // console.log(speedAlert);
                chai_1.expect(speedAlert.speedAlertId).to.equal(testSpeedAlert.speedAlertId);
                return done();
            });
        });
        it('should retrievable from a list', function (done) {
            var listCall = speedAlertService.list({ clientId: testClientId });
            listCall.then(function (listResult) {
                var anySpeedAlertMatchesId = _.any(listResult.speedAlerts, function (speedAlert) { return speedAlert.speedAlertId === testSpeedAlert.speedAlertId; });
                // console.log(listResult, anySpeedAlertMatchesId);
                chai_1.expect(anySpeedAlertMatchesId).to.exist;
                return done();
            });
        });
        it('should be deleteable', function (done) {
            var idOfRuleToDelete = testSpeedAlert.speedAlertId;
            var speedAlertDeletion = speedAlertService.delete(idOfRuleToDelete);
            speedAlertDeletion.then(function () {
                var deletedSpeedAlertRetrieval = speedAlertService.get(idOfRuleToDelete);
                // console.log(deletedSpeedAlertRetrieval, idOfRuleToDelete);
                return deletedSpeedAlertRetrieval.catch(function (fetchResult) {
                    chai_1.expect(fetchResult.response.status).to.equal(404);
                    return done();
                });
            });
        });
    });
});
//# sourceMappingURL=speed-alerts.service.spec.js.map