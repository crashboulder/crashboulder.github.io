"use strict";
var _ = require('underscore');
var chai_1 = require('chai');
var _1 = require('../../src/geofences/');
var application_context_1 = require('../../src/application-context');
var _2 = require('../../src/');
describe('Geofence Service Integration', function () {
    this.timeout(5000);
    var FAKE_APPLICATION = {
        appId: "test"
    };
    var FAKE_GEOFENCE = {
        appId: FAKE_APPLICATION.appId,
        clientId: 'fake-client-id',
        region: {
            type: 'circle',
            longitude: -104.999567,
            latitude: 39.750580,
            radius: 90
        },
        enter: {
            reactions: []
        }
    };
    var geofenceService;
    var applicationContext = new application_context_1.ApplicationContext('test', _2.getConfiguration().secret);
    beforeEach(function () {
        geofenceService = new _1.GeofenceService(applicationContext);
        return geofenceService;
    });
    it('should create a geofence', function (done) {
        var geofenceCreation = geofenceService.create(FAKE_GEOFENCE);
        geofenceCreation.then(function (result) {
            // console.log('geofence creation', result);
            chai_1.expect(result.geofenceId).to.exist;
            return done();
        });
    });
    describe('with an existing geofence', function () {
        var testClientId = 'node-api-geofence-service-spec-test-client';
        var testGeofence;
        beforeEach(function (done) {
            testGeofence = _.extend({}, FAKE_GEOFENCE, { clientId: testClientId });
            geofenceService.create(testGeofence)
                .then(function (response) {
                testGeofence = response;
                return done();
            });
        });
        it('should be retrievable with get', function (done) {
            var getCall = geofenceService.get(testGeofence.geofenceId);
            getCall.then(function (result) {
                // console.log('should be retrievable with get result: ', result);
                chai_1.expect(result.geofence.geofenceId).to.equal(testGeofence.geofenceId);
                return done();
            });
        });
        it('should retrievable from a list', function (done) {
            var listCall = geofenceService.list({ clientId: testClientId });
            listCall.then(function (result) {
                // console.log('list call', result, result.geofences);
                var anyGeofenceIdMatches = _.any(result.geofences, function (geofence) { return geofence.geofenceId === testGeofence.geofenceId; });
                chai_1.expect(anyGeofenceIdMatches).to.be.true;
                return done();
            });
        });
        it('should be deleteable', function (done) {
            var idOfRuleToDelete = testGeofence.geofenceId;
            var geofenceDeletion = geofenceService.delete(idOfRuleToDelete);
            geofenceDeletion.then(function (result) {
                // console.log('deletion result', result);
                var deletedGeofenceRetrieval = geofenceService.get(idOfRuleToDelete);
                // console.log('retrieve deleted geofence', idOfRuleToDelete);
                return deletedGeofenceRetrieval.catch(function (fetchResult) {
                    chai_1.expect(fetchResult.response.status).to.equal(404);
                    return done();
                });
            });
        });
    });
});
//# sourceMappingURL=geofence.service.spec.js.map