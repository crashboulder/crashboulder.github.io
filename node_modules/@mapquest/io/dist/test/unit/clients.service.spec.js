"use strict";
var chai = require('chai');
var chaiAsPromised = require('chai-as-promised');
var _1 = require('../../src/clients/');
var _2 = require('../../src/observations/');
var application_context_1 = require('../../src/application-context');
var _3 = require('../../src/');
var mocks_1 = require('./mocks');
var test_constants_1 = require('../test-constants');
var expect = chai.expect;
chai.use(chaiAsPromised);
chai.should();
describe('Client Service Mock Http \n\n', function () {
    var clientService;
    var applicationContext = new application_context_1.ApplicationContext('application', _3.getConfiguration().secret);
    var MOCK_CLIENT = {
        appId: 'application',
        clientId: 'client',
        label: 'mock-client'
    };
    beforeEach(function () {
        clientService = new _1.ClientService(applicationContext, new mocks_1.MockHttpRequest);
    });
    it('create should post to a properly formatted URL', function () {
        var postRequest = clientService.create(MOCK_CLIENT);
        return expect(postRequest).to.eventually.satisfy(function (responseObject) {
            var host = test_constants_1.CURRENT_ENVIRONMENT['et-devices'];
            var properURL = host + "/clients/v1/application/client";
            return responseObject.url === properURL;
        });
    });
    it('create should post an observation to a properly formatted URL', function () {
        var observation = {
            observedAt: Date.now(),
            receivedAt: Date.now()
        };
        var payload = new _2.ObservationPayload(MOCK_CLIENT.clientId, [observation]);
        var postRequest = clientService.postObservations(payload);
        return expect(postRequest).to.eventually.satisfy(function (responseObject) {
            var host = test_constants_1.CURRENT_ENVIRONMENT['et-devices'];
            var properURL = host + "/clients/v1/application/client/observations";
            return responseObject.url === properURL;
        });
    });
    it('list should get a properly formatted URL', function () {
        var postRequest = clientService.list();
        return expect(postRequest).to.eventually.be.fulfilled.and.satisfy(function (responseObject) {
            var host = test_constants_1.CURRENT_ENVIRONMENT['et-devices'];
            var properURL = host + "/clients/v1/application";
            return responseObject.url === properURL;
        });
    });
    it('update should patch to a properly formatted URL', function () {
        var updateRequest = clientService.update(MOCK_CLIENT);
        return expect(updateRequest).to.eventually.satisfy(function (responseObject) {
            var host = test_constants_1.CURRENT_ENVIRONMENT['et-devices'];
            var properURL = host + "/clients/v1/application/client";
            return responseObject.url === properURL;
        });
    });
    it('delete should delete to a properly formatted URL', function () {
        var deleteRequest = clientService.delete('42');
        return expect(deleteRequest).to.eventually.satisfy(function (responseObject) {
            var host = test_constants_1.CURRENT_ENVIRONMENT['et-devices'];
            var properURL = host + "/clients/v1/application/42";
            return responseObject.url === properURL;
        });
    });
    it('create should call the platform API to create a new tenant ( client )', function () {
        return clientService.create(MOCK_CLIENT).should.eventually.be.fulfilled.and.satisfy(function (result) { return result.data === MOCK_CLIENT; });
    });
    it('list should get the list from the service without using a payload', function () {
        var getRequest = clientService.list();
        return expect(getRequest).to.eventually.be.fulfilled.and.satisfy(function (responseObject) { return !responseObject.data; });
    });
    it('should reset using a properly formatted URL', function () {
        var resetRequest = clientService.reset(MOCK_CLIENT);
        return expect(resetRequest).to.eventually.be.fulfilled.and.satisfy(function (responseObject) {
            var host = test_constants_1.CURRENT_ENVIRONMENT['et-devices'];
            var propahEarl = host + "/clients/v1/" + MOCK_CLIENT.appId + "/" + MOCK_CLIENT.clientId + "/reset/secret";
            return responseObject.url === propahEarl;
        });
    });
});
//# sourceMappingURL=clients.service.spec.js.map