"use strict";
var chai = require('chai');
var chaiAsPromised = require('chai-as-promised');
var mocks_1 = require('./mocks');
var _1 = require('../../src/security/');
var _2 = require('../../src/geofences/');
var application_context_1 = require('../../src/application-context');
var _3 = require('../../src/');
var test_constants_1 = require('../test-constants');
var sinon = require('sinon'); // workaround for: import * as sinon from 'sinon';
var sinonChai = require('sinon-chai'); //workaround for: import * as sinonChai from 'sinon-chai';
var expect = chai.expect;
chai.use(chaiAsPromised);
chai.should();
describe('Authentication Service', function () {
    var authenticationService;
    var applicationId = 'fake-app';
    describe('given an application access token', function () {
        var accessToken = '42';
        var mockHttp = new mocks_1.MockHttpRequest;
        var httpPostMethodSpy;
        var applicationContext = new application_context_1.ApplicationContext('app-id', _3.getConfiguration().secret);
        var genericService = new _2.GeofenceService(applicationContext);
        beforeEach(function () {
            httpPostMethodSpy = sinon.spy(mockHttp, 'post');
            authenticationService = new _1.AuthenticationService({
                applicationId: applicationId,
            }, mockHttp);
            genericService.applicationContext.applicationAccessToken = accessToken;
        });
        afterEach(function () {
            mockHttp.post.restore();
        });
        it('should be able to build Authorization headers', function () {
            var authorizationHeader = _1.buildAuthenticationHeader(applicationContext);
            authorizationHeader['Authorization'].should.equal("Bearer " + accessToken);
        });
        it('should request an application access token', function () {
            var secret = _3.getConfiguration().secret;
            var tokenRequest = authenticationService.fetchApplicationAccessToken(secret);
            return expect(tokenRequest).to.eventually.be.fulfilled.and.satisfy(function (responseObject) {
                var postCalled = httpPostMethodSpy.calledOnce;
                var host = test_constants_1.CURRENT_ENVIRONMENT['et-auth'];
                var properURL = host + "/authorization/v1/" + applicationId;
                var firstPostCall = httpPostMethodSpy.getCall(0);
                var url = firstPostCall.args[0];
                var urlIsCorrect = url === properURL;
                var config = firstPostCall.args[2];
                var headersContainSecret = config.headers['Authorization'] === secret;
                return urlIsCorrect && postCalled && headersContainSecret;
            });
        });
    });
});
//# sourceMappingURL=authentication.service.spec.js.map