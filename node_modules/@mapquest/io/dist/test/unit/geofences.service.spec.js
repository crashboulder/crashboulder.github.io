"use strict";
var chai = require('chai');
var chaiAsPromised = require('chai-as-promised');
var _1 = require('../../src/geofences/');
var mocks_1 = require('./mocks');
var application_context_1 = require('../../src/application-context');
var _2 = require('../../src/');
var test_constants_1 = require('../test-constants');
var sinon = require('sinon'); // workaround for: import * as sinon from 'sinon';
var sinonChai = require('sinon-chai'); //workaround for: import * as sinonChai from 'sinon-chai';
var expect = chai.expect;
chai.use(chaiAsPromised);
chai.use(sinonChai);
chai.should();
describe('Geofence Service: \n\n', function () {
    var FAKE_GEOFENCE = {
        appId: 'application',
        clientId: 'fake-client-id',
        geofenceId: 'geofence-id',
        region: {
            type: 'circle',
            longitude: -104.999567,
            latitude: 39.750580,
            radius: 90
        },
        enter: {
            reactions: []
        }
    };
    var geofenceService;
    var applicationContext = new application_context_1.ApplicationContext('application', _2.getConfiguration().secret);
    beforeEach(function () {
        geofenceService = new _1.GeofenceService(applicationContext, new mocks_1.MockHttpRequest);
    });
    describe('create', function () {
        it('should call the platform API to create a geofence rule', function () {
            return geofenceService.create(FAKE_GEOFENCE).should.eventually.satisfy(function (result) { return result.data === FAKE_GEOFENCE; });
        });
        it('should post to a properly formatted URL', function () {
            var postRequest = geofenceService.create(FAKE_GEOFENCE);
            return expect(postRequest).to.eventually.satisfy(function (responseObject) {
                var host = test_constants_1.CURRENT_ENVIRONMENT['et-rules'];
                var properURL = host + "/geofences/v1/application";
                return responseObject.url === properURL;
            });
        });
    });
    describe('list', function () {
        it('should list geofences for a client id from the correct URL', function () {
            var host = test_constants_1.CURRENT_ENVIRONMENT['et-rules'];
            var clientId = '42';
            var expectedURL = host + "/geofences/v1/" + applicationContext.applicationId + "?clientId=" + clientId;
            return geofenceService.list({ clientId: clientId }).should.eventually.satisfy(function (requestObject) {
                return requestObject.url === expectedURL && !requestObject.data;
            });
        });
    });
    describe('get', function () {
        var geofenceId = '999';
        it('should get a particular geofence by id', function () {
            var host = test_constants_1.CURRENT_ENVIRONMENT['et-rules'];
            var expectedURL = host + "/geofences/v1/" + applicationContext.applicationId + "/" + geofenceId;
            return geofenceService.get(geofenceId).should.eventually.satisfy(function (requestObject) {
                return requestObject.url === expectedURL && requestObject.data !== null;
            });
        });
    });
    describe('delete', function () {
        var geofenceId = '999';
        it('should delete a particular geofence by id', function () {
            var host = test_constants_1.CURRENT_ENVIRONMENT['et-rules'];
            var expectedURL = host + "/geofences/v1/" + applicationContext.applicationId + "/" + geofenceId;
            return geofenceService.delete(geofenceId).should.eventually.satisfy(function (requestObject) {
                return requestObject.url === expectedURL && requestObject.data !== null;
            });
        });
    });
});
//# sourceMappingURL=geofences.service.spec.js.map