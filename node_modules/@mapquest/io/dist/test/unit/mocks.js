"use strict";
var MockHttpRequest = (function () {
    function MockHttpRequest(options) {
        if (options === void 0) { options = {}; }
        this.options = options;
        this.simulateExpiredToken = false;
        this.expiredTokenSimulated = false;
        if (options.simulateExpiredToken) {
            this.simulateExpiredToken = true;
        }
    }
    MockHttpRequest.prototype.get = function (url, config) {
        return Promise.resolve({ url: url, config: config });
    };
    MockHttpRequest.prototype.post = function (url, data, config) {
        if (this.simulateExpiredToken && !this.expiredTokenSimulated) {
            var errorResponse = {
                config: config,
                response: { status: 401 }
            };
            this.expiredTokenSimulated = true;
            return Promise.resolve(errorResponse);
        }
        else {
            var responseObject = { url: url, data: data, config: config };
            return Promise.resolve(responseObject);
        }
    };
    MockHttpRequest.prototype.patch = function (url, data, config) {
        var responseObject = { url: url, data: data, config: config };
        return Promise.resolve(responseObject);
    };
    MockHttpRequest.prototype.delete = function (url, config) {
        return Promise.resolve({ url: url, config: config });
    };
    MockHttpRequest.prototype.list = function (url, data, config) {
        return Promise.resolve([{ url: url, data: data, config: config }]);
    };
    return MockHttpRequest;
}());
exports.MockHttpRequest = MockHttpRequest;
//# sourceMappingURL=mocks.js.map